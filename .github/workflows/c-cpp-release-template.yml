# SPDX-FileCopyrightText: Copyright (C) 2025 FabrÃ­cio Barros Cabral
# SPDX-License-Identifier: MIT
---
name: c-cpp-release-template
'on':
  workflow_call:
    secrets:
      GH_TOKEN:
        description: 'GitHub token'
        required: true
defaults:
  run:
    shell: bash -xeuo pipefail {0}
permissions:
  contents: read
jobs:
  checkcode:
    runs-on: ubuntu-24.04
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Check for code
        id: check
        # yamllint disable rule:line-length
        run: |
          found=$(find . -maxdepth 1 -name "autogen.sh" -o -name "configure" -o -name "Makefile")
          if [[ -n "${found}" ]]; then
            echo "proceed=true" >> "${GITHUB_OUTPUT}"
          else
            echo "Code not found. Stopping execution of the other jobs."
            echo "proceed=false" >> "${GITHUB_OUTPUT}"
          fi
        # yamllint enable rule:line-length
  c-cpp-linux-build-template:
    runs-on: ubuntu-24.04
    needs: checkcode
    if: needs.checkcode.outputs.proceed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          if [[ -s apt-packages.txt ]]; then
            sudo apt-get update
            xargs sudo apt-get install -y \
              --no-install-recommends < apt-packages.txt
          fi
      - name: Configure and build
        run: |
          [[ -x ./autogen.sh ]] && ./autogen.sh
          [[ -x ./configure ]] && ./configure
          [[ -s Makefile ]] || {
            echo "I couldn't find an autogen.sh, configure, or Makefile."
            echo "Please check your files."
            exit 1
          }
          make
      - name: Get properties from configure.ac
        id: props
        # yamllint disable rule:line-length
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
        # yamllint enable rule:line-length
      - name: Create source package
        run: |
          make dist
      - name: Create Linux binary package
        run: |
          make binary-dist
      - name: Prepare packages to distribution
        env:
          NAME: ${{ steps.props.outputs.name }}
          VERSION: ${{ steps.props.outputs.version }}
        run: |
          # Sanitize variables for security purposes
          safe_name="$(echo "${NAME}" | tr -cd '[:alnum:]._-' )"
          safe_version="$(echo "${VERSION}" | tr -cd '[:alnum:]._-' )"

          # Check if variables are empty
          [[ -z "$safe_name" ]] && { echo "Invalid name"; exit 1; }
          [[ -z "$safe_version" ]] && { echo "Invalid version"; exit 1; }

          # Check if files exists
          src="${safe_name}-${safe_version}.tar.gz"
          bin="${safe_name}-${safe_version}-bin.tar.gz"
          [[ -f "$src" ]] || { echo "File '${src}' not found"; exit 1; }
          [[ -f "$bin" ]] || { echo "File '${bin}' not found"; exit 1; }

          # Move files
          mkdir -p dist
          mv "${src}" dist/
          mv "${bin}" "dist/${safe_name}-${safe_version}-linux.tar.gz"
  c-cpp-macos-build-template:
    runs-on: macos-15
    needs: checkcode
    if: needs.checkcode.outputs.proceed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          if [[ -s brew-packages.txt ]]; then
            brew update
            xargs brew install < brew-packages.txt
          fi
      - name: Configure and build
        run: |
          [[ -x ./autogen.sh ]] && ./autogen.sh
          [[ -x ./configure ]] && ./configure
          [[ -s Makefile ]] || {
            echo "I couldn't find an autogen.sh, configure, or Makefile."
            echo "Please check your files."
            exit 1
          }
          make
      - name: Get properties from configure.ac
        id: props
        # yamllint disable rule:line-length
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
        # yamllint enable rule:line-length
      - name: Create macOS binary package
        run: |
          make binary-dist
      - name: Prepare package to distribution
        env:
          NAME: ${{ steps.props.outputs.name }}
          VERSION: ${{ steps.props.outputs.version }}
        run: |
          # Sanitize variables for security purposes
          safe_name="$(echo "${NAME}" | tr -cd '[:alnum:]._-' )"
          safe_version="$(echo "${VERSION}" | tr -cd '[:alnum:]._-' )"

          # Check if variables are empty
          [[ -z "$safe_name" ]] && { echo "Invalid name"; exit 1; }
          [[ -z "$safe_version" ]] && { echo "Invalid version"; exit 1; }

          # Check if file exist
          bin="${safe_name}-${safe_version}-bin.tar.gz"
          [[ -f "$bin" ]] || { echo "File '${bin}' not found"; exit 1; }

          # Move file
          mkdir -p "dist"
          mv "${bin}" dist/"${safe_name}-${safe_version}-macos.tar.gz"
  c-cpp-release-template:
    runs-on: ubuntu-24.04
    needs: [c-cpp-linux-build-template, c-cpp-macos-build-template]
    permissions:
      contents: write
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v5
        with:
          name: linux-dist
          path: dist
      - name: Download macOS artifacts
        uses: actions/download-artifact@v5
        with:
          name: macos-dist
          path: dist
      - name: Set release tag
        id: tag
        run: |
          # Detects which tag triggered the build
          echo "tag=${GITHUB_REF##*/}" >> "${GITHUB_OUTPUT}"
      - name: Release artifacts
        # yamllint disable-line rule:line-length
        uses: softprops/action-gh-release@5d1b0b11643723aa24b0a5f8cef9618f9c2ed69b
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
