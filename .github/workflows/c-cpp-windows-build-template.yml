# SPDX-FileCopyrightText: Copyright (C) 2025 FabrÃ­cio Barros Cabral
# SPDX-License-Identifier: MIT
---
# yamllint disable rule:line-length
name: c-cpp-windows-build-template
'on':
  workflow_call:
defaults:
  run:
    shell: msys2 {0}
permissions:
  contents: read
jobs:
  c-cpp-windows-build-template:
    runs-on: windows-2025
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install and setup MSYS2 with MinGW64
        uses: msys2/setup-msys2@ee87529e22c13ef957bcd5ef65c3ca2d61025d19
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            autoconf
            automake
            libtool
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-libpcap
            mingw-w64-x86_64-tcl
      - name: Detect working directory
        id: detect
        run: |
          if [[ -d c-cpp ]]; then
            echo "dir=c-cpp" >> "${GITHUB_OUTPUT}"
          else
            echo "dir=." >> "${GITHUB_OUTPUT}"
          fi
      - name: Configure and build
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          [[ -x ./autogen.sh ]] && ./autogen.sh
          [[ -x ./configure ]] && ./configure --host=x86_64-w64-mingw64
          [[ -s Makefile ]] || {
            echo "I couldn't find an autogen.sh, configure, or Makefile."
            echo "Please check your files."
            exit 1
          }
          make
      - name: Get properties from configure.ac
        working-directory: ${{ steps.detect.outputs.dir }}
        id: props
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
      - name: Create source package
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          make dist
      - name: Create Windows binary package
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          make binary-dist
      - name: Prepare packages to distribution
        working-directory: ${{ steps.detect.outputs.dir }}
        run: |
          md dist
          move "${{ steps.props.outputs.name }}-${{ steps.props.outputs.version }}-bin.zip" ^
            "dist/${{ steps.props.outputs.name }}-${{ steps.props.outputs.version }}-windows.zip"
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: "${{ steps.detect.outputs.dir }}/dist/*.zip"
